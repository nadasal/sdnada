ylim(0, 3)
print(viz_plot11)
viz_plot10 <- viz %>%
ggplot(aes(x = survey, y = viz[[10]], fill = survey)) +
geom_boxplot() +
ylab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
ylim(0, 3)
print(viz_plot10)
viz_plot10 <- viz %>%
ggplot(aes(x = survey, y = viz[[10]], fill = survey)) +
geom_boxplot() +
ylab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
ylim(0, 30)
print(viz_plot10)
viz_plot11 <- viz %>%
ggplot(aes(x = viz[[11]], fill = survey)) +
geom_histogram() +
facet_grid(survey~.) +
xlab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("From this visualization, estimate the smallest number of intentional walks observed for any player:")
print(viz_plot11)
print(viz_plot1)
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
ylim(0, 13)
print(viz_plot1)
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
ylim(0, 13) +
scale_Y_continuous(breaks = c(1:10))
print(viz_plot1)
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
ylim(0, 13) +
scale_y_continuous(breaks = c(1:10))
print(viz_plot1)
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
ylim(0, 13) +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14))
print(viz_plot1)
print(viz_plot2)
viz_plot2 <- viz %>%
ggplot(aes(x = viz[[2]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to identify outliers")
print(viz_plot2)
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data")
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14))
print(viz_plot1)
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14))
print(viz_plot1)
viz_plot2 <- viz %>%
ggplot(aes(x = viz[[2]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to identify outliers") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14))
print(viz_plot2)
viz_plot2 <- viz %>%
ggplot(aes(x = viz[[2]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to identify outliers") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14, 16))
print(viz_plot2)
viz_plot2 <- viz %>%
ggplot(aes(x = viz[[2]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to identify outliers") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12))
print(viz_plot2)
viz_plot10 <- viz %>%
ggplot(aes(x = survey, y = viz[[10]], fill = survey)) +
geom_boxplot() +
ylab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("Estimate the most frequent number of home runs observed")
viz_plot10 <- viz %>%
ggplot(aes(x = survey, y = viz[[10]], fill = survey)) +
geom_boxplot() +
ylab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("Estimate the most frequent number of home runs observed")
print(viz_plot10)
viz_plot10 <- viz %>%
ggplot(aes(x = survey, y = viz[[10]], fill = survey)) +
geom_boxplot() +
ylab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("Estimate the most frequent number of home runs observed") +
scale_y_continuous(breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60))
print(viz_plot10)
viz_plot10 <- viz %>%
ggplot(aes(x = survey, y = viz[[10]], fill = survey)) +
geom_boxplot() +
ylab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("Estimate the most frequent number of home runs observed") +
scale_y_continuous(breaks = c(0, 10, 20, 30, 40, 50, 60))
print(viz_plot10)
viz_plot11 <- viz %>%
ggplot(aes(x = viz[[11]], fill = survey)) +
geom_histogram() +
facet_grid(survey~.) +
xlab("response") +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("Estimate the smallest number of intentional walks observed for any player")
print(viz_plot11)
batting_tor %>%
summarise(min(IBB))
batting_tor <- Batting %>%
filter(teamID == "TOR") %>%
select(HR, IBB) %>%
droplevels
batting_tor %>%
count(HR) %>%
arrange(desc(n))
batting_tor %>%
summarise(min(IBB))
batting_tor %>%
summarise(min(IBB[is.na == FALSE]))
batting_tor %>%
summarise(min(IBB[is.na(IBB) == FALSE]))
batting_tor %>%
count(IBB)
Batting %>%
filter(teamID == "TOR")
batting_tor <- Batting %>%
filter(teamID == "TOR") %>%
select(playerID, HR, IBB) %>%
droplevels
batting_tor %>%
count(HR) %>%
arrange(desc(n))
batting_tor %>%
count(IBB)
batting_tor %>%
count(IBB) %>%
arrange(n)
batting_tor %>%
summarise(min(IBB[is.na(IBB) == FALSE]))
viz_plot1 <- viz %>%
ggplot(aes(x = viz[[1]], fill = survey)) +
geom_bar() +
xlab("response") +
facet_grid(~survey) +
scale_fill_manual(values = c("firebrick", "steelblue4")) +
guides(fill = "none") +
theme_bw() +
ggtitle("This visualization makes it easy to see the distribution of the data") +
scale_y_continuous(breaks = c(0, 2, 4, 6, 8, 10, 12, 14))
print(viz_plot1)
install.packages("sdnada")
devtools::install_github("nadasal/sdnada", host = "github.ubc.ca/api/v3", auth_token = "cba2bed9999e283b652f5bcb02402634123ba9c6")
library(sdnada)
stanadard_error([1,2,3,4])
stanadard_error(1,2,3,4)
standard_error([1,2,3,4])
standard_error(c(1.7, 5.4, 9.6, 4.8))
?standard_error
?sdnada
A <- matrix(c(5,0,2,3,1,3,10,8,7),3,3)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(Lahman)
library(knitr)
library(tidyverse)
library(broom)
library(GGally)
A <- matrix(c(5,0,2,3,1,3,10,8,7),3,3)
B <- matrix(c(10,5,3,2,4,6,3,2,1),3,3)
C <- matrix(c(1,2,3,4,5,6,0,0,1),3,3)
D <- matrix(c(1,2,10,12,20,5,1,1,1),3,3)
E <- A+B
print(E[2,3])
print(B %*% C)
solve(D)
X <- matrix(c(1,0,0,0,1,0,0,0,1),3,3)
Y <- matrix(c(2,16,4,1,8,7,3,10,4),3,3)
Z <- matrix(c(19,2,3,1,7,6,9,11,3),3,3)
print(X %*% Y)
print(Y %*% X)
print(Z %*% Y)
print(Y %*% Z)
#Subset the data to get only information we need
salaries_subset <- Salaries %>%
filter(yearID %in% c(2010:2015), teamID %in% c('NYA', 'OAK')) %>%
select(teamID, salary) %>%
droplevels()
attach(salaries_subset)
#Boxplot to compare data
salaries_plot <- salaries_subset %>%
ggplot(aes(x = teamID, y = salary)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, color = 'steelblue4')
print(salaries_plot)
#Mean, SD, and number of observations for each team
salary_summary <- salaries_subset %>%
group_by(teamID) %>%
summarise(mean = mean(salary), sd = sd(salary), observations = n())
kable(salary_summary)
#t-test
#var.equal = TRUE because although variances are not equal, Ns are close enough in size
ttest <- tidy(t.test(salary~teamID, alternative = 'two.sided', var.equal = TRUE))
kable(ttest)
#Model for comparison
model <- lm(salary~teamID)
#ANOVA on the model
anova <- tidy(anova(model))
kable(anova, digits = 100)
#Summary from the model
summary <- tidy(summary(model))
kable(summary, digits = 100)
#Summary of p-values
summary_results <- data.frame(
method = c('t-test', 'anova', 'lm'),
p.value = c(ttest$p.value, anova$p.value[1], summary$p.value[2]))
kable(summary_results, digits = 100)
#Subset the data to get only information we need
salaries_subset_more <- Salaries %>%
filter(yearID %in% c(2010:2015), teamID %in% c('NYA', 'TEX', 'TOR', 'HOU', 'SEA')) %>%
select(teamID, salary) %>%
droplevels()
detach(salaries_subset)
attach(salaries_subset_more)
#Boxplot to compare data
salaries_plot_more <- salaries_subset_more %>%
ggplot(aes(x = teamID, y = salary)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5, color = 'steelblue4')
print(salaries_plot_more)
#Mean, SD, and number of observations for each team
salary_summary_more <- salaries_subset_more %>%
group_by(teamID) %>%
summarise(mean = mean(salary), sd = sd(salary), observations = n())
kable(salary_summary_more)
#Pairwise t-test
ttest_more <- tidy(pairwise.t.test(salary, teamID, alternative = 'two.sided', p.adjust.method = 'bonferroni'))
kable(ttest_more, digits = 100)
#Model for comparison
model_more = lm(salary~teamID)
#Summary from the model
lm_more <- tidy(model_more) %>%
mutate(p.value = p.adjust(p.value, method = 'bonferroni'))
kable(lm_more, digits = 100)
#Summary of p-values
summary_results_more <- data.frame(
team = c('NYA - HOU', 'SEA - HOU', 'TEX - HOU', 'TOR - HOU'),
p.value_t.test = c(ttest_more$p.value[1:4]),
p.value_lm = lm_more$p.value[2:5])
kable(summary_results_more, digits = 100)
#In order to get the same results from both tests
lm_more_all <- bind_rows(
tidy(lm(salary~teamID))[2:5,],
tidy(lm(salary~relevel(teamID, 'NYA')))[3:5,],
tidy(lm(salary~relevel(teamID, 'SEA')))[4:5,],
tidy(lm(salary~relevel(teamID, 'TEX')))[5,]) %>%
mutate(p.value = p.adjust(p.value, method = 'bonferroni'))
#Summary of p-values
summary_results_more_all <- data.frame(
team = c('NYA - HOU', 'SEA - HOU', 'TEX - HOU', 'TOR - HOU', 'NYA - SEA', 'NYA - TEX', 'NYA - TOR', 'SEA - TEX', 'SEA - TOR', 'TEX - TOR'),
p.value_t.test = c(ttest_more$p.value[1:10]),
p.value_lm = lm_more_all$p.value[1:10])
kable(summary_results_more_all, digits = 100)
#Subset the data to get only information we need
salaries_subset_year <- Salaries %>%
filter(yearID %in% c(1990, 2015), teamID %in% c('NYA', 'OAK')) %>%
mutate(yearID = as.factor(yearID)) %>%
select(yearID, teamID, salary) %>%
droplevels()
detach(salaries_subset_more)
attach(salaries_subset_year)
#Interaction plot to compare data by year
salaries_plot_year <- salaries_subset_year %>%
ggplot(aes(x = yearID, y = salary, color = teamID)) +
geom_jitter() +
stat_summary(fun.y = mean, geom = 'point', aes(group = teamID)) +
stat_summary(fun.y = mean, geom = 'line', aes(group = teamID))
print(salaries_plot_year)
#Model for comparison
model_year <- lm(salary~yearID * teamID)
#Summary from the model
lm_year <- tidy(model_year)
kable(lm_year, digits = 100)
#Summary of p-values
summary_results_year <- data.frame(
NYA_2015_reference = c('yearID', 'salary', 'Interaction'),
p.value = lm_year$p.value[2:4])
kable(summary_results_year, digits = 100)
#Subset the data to get only information we need
salaries_subset_HR <- full_join(Salaries, Batting) %>%
filter(yearID == 1985) %>%
select(HR, salary) %>%
droplevels() %>%
na.omit()
detach(salaries_subset_year)
attach(salaries_subset_HR)
#Scatter plot to compare data
salaries_plot_HR <- salaries_subset_HR %>%
ggplot(aes(x = HR, y = salary)) +
geom_point()
print(salaries_plot_HR)
#Model for comparison
model_HR <- lm(salary~HR)
#Summary from the model
lm_HR <- tidy(model_HR)
kable(lm_HR, digits = 100)
#Summary of p-values
summary_results_HR <- data.frame(
method = 'lm',
p.value = lm_HR$p.value[2])
kable(summary_results_HR, digits = 100)
#Interaction plot to compare data
salaries_plot_HR_lm <- salaries_plot_HR +
geom_smooth(method = 'lm', se = FALSE)
print(salaries_plot_HR_lm)
#Subset the data to get only information we need
salaries_subset_H <- Batting %>%
filter(yearID == 2015) %>%
select(lgID, HR, H) %>%
droplevels() %>%
na.omit()
detach(salaries_subset_HR)
attach(salaries_subset_H)
#Scatter plot to compare data with least square regression lines
salaries_plot_H <- salaries_subset_H %>%
ggplot(aes(x = H, y = HR, color = lgID)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
print(salaries_plot_H)
#Model for comparison
model_H <- lm(HR~H * lgID)
#Summary from the model
lm_H <- tidy(model_H)
kable(lm_H, digits = 100)
#Summary of p-values
summary_results_H <- data.frame(
Hypothesis = c('H', 'lgID interaction'),
p.value = c(lm_H$p.value[2], lm_H$p.value[4]))
kable(summary_results_H, digits = 100)
#Subset the data to get only information we need
salaries_batting <- left_join(Salaries, Batting) %>%
filter(yearID == 1985, teamID %in% c('ATL', 'CAL')) %>%
select(teamID, lgID, H, HR, salary) %>%
droplevels()
detach(salaries_subset_H)
attach(salaries_batting)
ggpairs(salaries_batting, columns = c('teamID', 'lgID', 'H', 'HR'))
#Model for comparison
model_final <- lm(salary~H * lgID * HR * teamID * HR)
#Summary from the model
lm_final <- tidy(model_final)
kable(lm_final, digits = 100)
knitr::opts_chunk$set(error = TRUE, collapse = TRUE, comment = "#>")
library(tidyverse)
library(Lahman)
library(broom)
matrix(c(1,5,2,3),2,2)
matrix(c(1,2,5,3),2,2)
A+B
A <- matrix(c(1,2,5,3),2,2)
matrix(c(1,2,5,3),2,2)
matrix(c(0,0,2,1),2,2)
A+B
A <- matrix(c(1,2,5,3),2,2)
B <- matrix(c(0,0,2,1),2,2)
A+B
matrix(c(6,8),1,1)
B <- matrix(c(6,8),1,2)
matrix(c(6,8),1,2)
matrix(c(6,5,9,8),2,2)
A <- matrix(c(6,5,9,8),2,2)
B <- matrix(c(6,8),1,2)
A+B
A <- matrix(c(6,5,9,8),2,2)
B <- matrix(c(6,8),1,2)
A+B
B <- matrix(c(6,8),1,2)
A <- matrix(c(6,5,9,8),2,2)
A+B
head(Salaries)
library(tidyverse)
library(Lahman)
library(broom)
ttest_result <- t.test(salary ~ lgID, data = Salaries)
ttest_result
three_teams <- c("TOR", "NYA", "SEA")
three_teams_data <- Salaries %>%
filter(teamID %in% three_teams)
ANOVA_result <- aov(salary ~ teamID, data = Salaries)
summary(ANOVA_result)
summary(ANOVA_result)
head(Salaries)
two_teams <- c("TOR", "MIA")
two_teams_two_years_data <- Salaries %>%
filter(teamID %in% two_teams, yearID == 2014 | yearID == 2015)
lm_model <- lm(salary ~ teamID + yearID, data = two_teams_two_years_data)
summary(lm_model)
head(Salaries)
two_teams <- c("NYA", "CLE")
two_teams_one_year_data <- Salaries %>%
filter(teamID %in% two_teams, yearID == 2015)
lm_model <- lm(salary ~ teamID, data = two_teams_one_year_data)
summary(lm_model)
matrix(c(6,5,9,8),2,2)
matrix(c(6,8),1,2)
A+B
A %+% B
A %+% B
A %*% B
A + B
A <- matrix(c(1,2,5,3),2,2)
B <- matrix(c(0,0,2,1),2,2)
A+B
matrix(c(1,2,7,4),2,2)
B %*% C
C <- matrix(c(1,2,7,4),2,2)
B %*% C
matrix(c(0,0,2,1),2,2)
C <- matrix(c(3,0,1,0),2,2)
matrix(c(3,0,1,0),2,2)
B %*% C
check()
devtools::check()
setwd("C:/Users/nsale/Desktop/sdnada/R")
devtools::check()
document()
devtools::document()
